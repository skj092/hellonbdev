# AUTOGENERATED! DO NOT EDIT! File to edit: 01_data.ipynb (unless otherwise specified).

__all__ = ['train', 'images', 'DanceData', 'tsfm', 'msk', 'train_df', 'valid_df', 'train_ds', 'valid_ds', 'bs',
           'train_dl', 'valid_dl', 'show_batch']

# Cell
from fastai2.vision.all import *
from nbdev import *
import pandas as pd
import torch
from glob import glob
from PIL import Image
from torch.utils.data import Dataset
from torch.utils.data import DataLoader
import os
import torchvision.transforms as T
import numpy as np
import matplotlib.pyplot as plt
from torchvision.utils import make_grid
import torch.nn as nn
import torch.nn.functional as F

# Cell
train = pd.read_csv('train.csv')
train.head()

# Cell
images = glob('train/'+'*.jpg')
images[:5]

# Cell
#exports
Image.open(images[0])

# Cell
class DanceData(Dataset):
    def __init__(self, df, transform=None):
        self.df = df
        self.transform = transform
    def __len__(self):
        return len(self.df)

    def __getitem__(self, idx):
        idx, img_name, label = self.df.loc[idx]
        img_path = os.path.join('train/', img_name)
        img = Image.open(img_path)
        if self.transform:
            img = self.transform(img)
        return img, label2idx[label]

# Cell
tsfm = T.Compose([T.Resize((224, 224)), T.ToTensor()])

# Cell
np.random.seed(42)
msk = np.random.rand(len(train)) < 0.9

train_df = train[msk].reset_index()
valid_df = train[~msk].reset_index()

train_ds = DanceData(train_df, transform=tsfm)
valid_ds = DanceData(valid_df, transform=tsfm)

# Cell
bs = 16
train_dl = DataLoader(train_ds, batch_size=bs, shuffle=True, num_workers=3, pin_memory=True)
valid_dl = DataLoader(valid_ds, batch_size=bs, shuffle=True, num_workers=3, pin_memory=True)

# Cell
def show_batch(dl, invert=True):
    for images, labels in dl:
        fig, ax = plt.subplots(figsize=(16, 8))
        ax.set_xticks([]); ax.set_yticks([])
        data = 1-images if invert else images
        ax.imshow(make_grid(data, nrow=16).permute(1, 2, 0))
        break